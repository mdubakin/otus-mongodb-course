-- развернем ВМ mongo для Percona
gcloud beta compute --project=celtic-house-266612 instances create mongop --zone=us-central1-a --machine-type=e2-medium --subnet=default --network-tier=PREMIUM --maintenance-policy=MIGRATE --service-account=933982307116-compute@developer.gserviceaccount.com --scopes=https://www.googleapis.com/auth/cloud-platform --image=ubuntu-2004-focal-v20210223 --image-project=ubuntu-os-cloud --boot-disk-size=10GB --boot-disk-type=pd-ssd --boot-disk-device-name=mongo --no-shielded-secure-boot --shielded-vtpm --shielded-integrity-monitoring --reservation-affinity=any

gcloud compute ssh mongop

-- https://docs.percona.com/percona-distribution-for-mongodb/latest/installation.html#install-on-debian-ubuntu
-- установим монго от Перконы -- Install the Percona Backup for MongoDB package
   sudo apt update && sudo apt-mark hold linux-image-5.11.0-1023-gcp && sudo DEBIAN_FRONTEND=noninteractive apt upgrade -y -q && sudo DEBIAN_FRONTEND=noninteractive apt install -y percona-server-mongodb percona-backup-mongodb
-- error!!

sudo wget https://repo.percona.com/apt/percona-release_latest.$(lsb_release -sc)_all.deb
sudo dpkg -i percona-release_latest.$(lsb_release -sc)_all.deb
sudo percona-release enable psmdb-44 release
sudo apt update
sudo DEBIAN_FRONTEND=noninteractive apt install -y percona-server-mongodb 

sudo percona-release enable pbm release
sudo apt update
sudo DEBIAN_FRONTEND=noninteractive apt install -y percona-backup-mongodb

-- https://docs.percona.com/percona-backup-mongodb/initial-setup.html


sudo rm -rf /home/mongo && sudo mkdir /home/mongo &&  sudo mkdir /home/mongo/db1 && sudo chmod 777 /home/mongo/db1 && mongod --dbpath /home/mongo/db1 --port 27001 --fork --logpath /home/mongo/db1/db1.log --pidfilepath /home/mongo/db1/db1.pid

mongo --port 27001
db.people4.insert( {name: "Corrado", surname: "Pandiani", year_of_birth: NumberLong(1971)} )
db.people4.insert( {name: "Tom", surname: "Cruise", year_of_birth: NumberLong(1961), gender: "M"} )
db.people4.insert( {name: "Kevin", surname: "Bacon", year_of_birth: NumberLong(1964), gender: "M", shirt_size: "L"} )
db.runCommand( { collMod: "people4",
   validator: {
      $jsonSchema : {
         bsonType: "object",
         required: [ "name", "surname", "gender" ],
         properties: {
            name: {
               bsonType: "string",
               description: "required and must be a string" },
            surname: {
               bsonType: "string",
               description: "required and must be a string" },
            gender: {
               enum: [ "M", "F" ],
               description: "required and must be M or F" }
         }
       }
},
validationLevel: "strict",
validationAction: "error"
})


sudo mkdir /home/mongobackups && sudo chmod 777 /home/mongobackups
sudo mongodump --port 27001 --db test --out /home/mongobackups/`date +"%m-%d-%y"`

-- sudo crontab -e
-- 3 3 * * * mongodump --port 27001 --out /home/mongobackups/`date +"%m-%d-%y"`
-- find /home/mongobackups/ -mtime +7 -exec rm -rf {} \;

sudo mongorestore --port 27001 --db newdb --drop /home/mongobackups/12-29-21/test/
-- 2 document(s) restored successfully. 1 document(s) failed to restore.


gcloud compute instances delete mongop



-- построить шардированный кластер из 3 кластерных нод( по 3 инстанса с репликацией) и с кластером конфига(3 инстанса);
vm1=config1 + primary1 + slave2 + slave3
vm2=config2 + slave1 + primary2 + slave3
vm3=config3 + slave1 + slave2 + primary3 + mongos2
vm4=mongos1

-- развернем 4 ВМ
{% comment %} for i in {1..4}; do gcloud beta compute --project=celtic-house-266612 instances create mongo$i --zone=us-central1-a --machine-type=e2-medium --subnet=default --network-tier=PREMIUM --maintenance-policy=MIGRATE --service-account=933982307116-compute@developer.gserviceaccount.com --scopes=https://www.googleapis.com/auth/cloud-platform --image=ubuntu-2004-focal-v20211202 --image-project=ubuntu-os-cloud --boot-disk-size=10GB --boot-disk-type=pd-ssd --boot-disk-device-name=mongo$i --no-shielded-secure-boot --shielded-vtpm --shielded-integrity-monitoring --reservation-affinity=any & done; {% endcomment %}
for i in {1..4}; do gcloud beta compute instances create mongo$i --machine-type=e2-medium --subnet=default --network-tier=PREMIUM --maintenance-policy=MIGRATE --scopes=https://www.googleapis.com/auth/cloud-platform --image=ubuntu-2004-focal-v20211202 --image-project=ubuntu-os-cloud --boot-disk-size=10GB --boot-disk-type=pd-ssd --boot-disk-device-name=mongo$i --no-shielded-secure-boot --shielded-vtpm --shielded-integrity-monitoring --reservation-affinity=any & done;
-- install percona mongo & backup
for i in {1..4}; do gcloud compute ssh mongo$i --command='sudo apt update && sudo apt-mark hold linux-image-5.11.0-1023-gcp && sudo DEBIAN_FRONTEND=noninteractive apt upgrade -y -q && sudo wget https://repo.percona.com/apt/percona-release_latest.$(lsb_release -sc)_all.deb && sudo dpkg -i percona-release_latest.$(lsb_release -sc)_all.deb && sudo percona-release enable psmdb-44 release && sudo apt update && sudo DEBIAN_FRONTEND=noninteractive apt install -y percona-server-mongodb && sudo percona-release enable pbm release && sudo apt update && sudo DEBIAN_FRONTEND=noninteractive apt install -y percona-backup-mongodb' & done;

-- проверим, что c монго
for i in {1..3}; do gcloud compute ssh mongo$i --command='hostname; ps -aef | grep mongo | grep -v grep' & done;

-- обратим внимание, что по умолчанию монго от перконы запущена
-- mongod     16422       1  0 11:49 ?        00:00:02 /usr/bin/mongod -f /etc/mongod.conf
-- убьем ненужные
for i in {1..4}; do gcloud compute ssh mongo$i --command="hostname; ps -aef | grep mongo | grep -v grep | awk {'print \$2'}| sudo xargs kill -9"; done

-- создадим каталоги
for i in {1..4}; do gcloud compute ssh mongo$i --command='sudo rm -rf /home/mongo && sudo mkdir /home/mongo &&  sudo mkdir /home/mongo/{dbc1,db1,db2,db3} && sudo chmod 777 /home/mongo/{dbc1,db1,db2,db3}' & done;

-- запустим конфиг сервера !!! bind_ip
for i in {1..3}; do gcloud compute ssh mongo$i --command='hostname; mongod --configsvr --bind_ip_all --dbpath /home/mongo/dbc1 --port 27001 --replSet RScfg --fork --logpath /home/mongo/dbc1/dbc1.log --pidfilepath /home/mongo/dbc1/dbc1.pid' & done;

-- $(hostname) аналог bind_ip_all
mongo --port 27001 --host 35.246.222.0

gcloud compute ssh mongo1



-- инициализируем репликасет конфиг сервера
mongo --port 27001
rs.initiate({"_id" : "RScfg", configsvr: true, members : [{"_id" : 0, host : "mongo1:27001"},{"_id" : 1, host : "mongo2:27001"},{"_id" : 2, host : "mongo3:27001"}]});
use admin
db.createUser({user: "UserClusterAdmin",pwd: "Otus$123", roles: [ "clusterAdmin" ]})
--Владелец всех БД
db.createUser({user: "UserdbOwner",pwd: "Otus$123", roles: [ { role: "dbOwner", db: "*" } ]})
-- Супер ROOT
db.createUser({user: "UserRoot",pwd: "Otus$123", roles: [ "root" ]})


-- Выключаем конфиг сервера
for i in {1..3}; do gcloud compute ssh mongo$i --command="hostname; ps -aef | grep mongo | grep -v grep | awk {'print \$2'}| sudo xargs kill -9"; done;

-- запускаем с аутентификацией - НЕ СРАБОТАЕТ!!!
-- for i in {1..3}; do gcloud compute ssh mongo$i --command='hostname; mongod --auth --configsvr --bind_ip localhost,$(hostname) --dbpath /home/mongo/dbc1 --port 27001 --replSet RScfg --fork --logpath /home/mongo/dbc1/dbc1.log --pidfilepath /home/mongo/dbc1/dbc1.pid' & done;
-- BadValue: security.keyFile is required when authorization is enabled with replica sets
-- создадим каталоги mongo-security
for i in {1..4}; do gcloud compute ssh mongo$i --command='sudo mkdir /home/mongo/mongo-security && sudo chmod 777 /home/mongo/mongo-security' & done;

-- генерируем кей файл на 1 инстансе
openssl rand -base64 756 > /home/mongo/mongo-security/keyfile
chmod 400 /home/mongo/mongo-security/keyfile

-- поделимся ключом с ноутбука c остальными нодами
scp aeugene@35.225.245.110:/home/mongo/mongo-security/keyfile /mnt/c/download/keyfile
scp /mnt/c/download/keyfile aeugene@34.133.79.110:/home/mongo/mongo-security/keyfile
scp /mnt/c/download/keyfile aeugene@34.133.30.159:/home/mongo/mongo-security/keyfile
scp /mnt/c/download/keyfile aeugene@107.178.210.4:/home/mongo/mongo-security/keyfile
for i in {2..4}; do gcloud compute ssh mongo$i --command='chmod 400 /home/mongo/mongo-security/keyfile' & done;

-- запускаем с аутентификацией И КЛЮЧОМ
for i in {1..3}; do gcloud compute ssh mongo$i --command='hostname; mongod --auth --keyFile /home/mongo/mongo-security/keyfile --configsvr --bind_ip_all --dbpath /home/mongo/dbc1 --port 27001 --replSet RScfg --fork --logpath /home/mongo/dbc1/dbc1.log --pidfilepath /home/mongo/dbc1/dbc1.pid' & done;

-- не забываем экранировать спецсимволы
-- mongo --port 27001 -u "UserClusterAdmin" -p Otus$123 --authenticationDatabase "admin"
mongo --port 27001 -u "UserClusterAdmin" -p Otus\$123 --authenticationDatabase "admin"

rs.config()
rs.status()



-- создадим 3 репклики на 3 ВМ по 1 на каждой -- БЕЗ авторизации
for i in {1..3}; do gcloud compute ssh mongo$i --command='mongod --shardsvr --dbpath /home/mongo/db1 --bind_ip_all --port 27011 --replSet RS1 --fork --logpath /home/mongo/db1/dbrs1.log --pidfilepath /home/mongo/db1/dbrs1.pid;'; done
for i in {1..3}; do gcloud compute ssh mongo$i --command='mongod --shardsvr --dbpath /home/mongo/db2 --bind_ip_all --port 27021 --replSet RS2 --fork --logpath /home/mongo/db2/dbrs2.log --pidfilepath /home/mongo/db2/dbrs2.pid;'; done
for i in {1..3}; do gcloud compute ssh mongo$i --command='mongod --shardsvr --dbpath /home/mongo/db3 --bind_ip_all --port 27031 --replSet RS3 --fork --logpath /home/mongo/db3/dbrs3.log --pidfilepath /home/mongo/db3/dbrs3.pid;'; done


-- создадим реплкасеты
mongo --host mongo1 --port 27011
rs.initiate({"_id" : "RS1", members : [{"_id" : 0, priority : 3, host : "mongo1:27011"},{"_id" : 1, host : "mongo2:27011"},{"_id" : 2, host : "mongo3:27011"}]});
use admin
db.createUser({user: "UserDBAdmin",pwd: "Otus$123", roles: [ { role: "dbAdmin", db: "*" } ]})
db.createUser({user: "UserDBRoot",pwd: "Otus$123", roles: [ "root" ]})

mongo --host mongo2 --port 27021
rs.initiate({"_id" : "RS2", members : [{"_id" : 0, host : "mongo1:27021"},{"_id" : 1, priority : 3, host : "mongo2:27021"},{"_id" : 2, host : "mongo3:27021"}]});
use admin
db.createUser({user: "UserDBAdmin",pwd: "Otus$123", roles: [ { role: "dbAdmin", db: "*" } ]})
db.createUser({user: "UserDBRoot",pwd: "Otus$123", roles: [ "root" ]})

mongo --host mongo3 --port 27031
rs.initiate({"_id" : "RS3", members : [{"_id" : 0, host : "mongo1:27031"},{"_id" : 1, host : "mongo2:27031"},{"_id" : 2, priority : 3, host : "mongo3:27031"}]});
use admin
db.createUser({user: "UserDBAdmin",pwd: "Otus$123", roles: [ { role: "dbAdmin", db: "*" } ]})
db.createUser({user: "UserDBRoot",pwd: "Otus$123", roles: [ "root" ]})

-- убиваем реплики с данными
for i in {1..3}; do gcloud compute ssh mongo$i --command="hostname; ps -aef | grep shardsvr | grep -v grep | awk {'print \$2'}| sudo xargs kill -9"; done

-- запускаем репклики -- С авторизацией И КЛЮЧОМ!!!
for i in {1..3}; do gcloud compute ssh mongo$i --command='mongod --auth --keyFile /home/mongo/mongo-security/keyfile --shardsvr --dbpath /home/mongo/db1 --bind_ip_all --port 27011 --replSet RS1 --fork --logpath /home/mongo/db1/dbrs1.log --pidfilepath /home/mongo/db1/dbrs1.pid;'; done
for i in {1..3}; do gcloud compute ssh mongo$i --command='mongod --auth --keyFile /home/mongo/mongo-security/keyfile --shardsvr --dbpath /home/mongo/db2 --bind_ip_all --port 27021 --replSet RS2 --fork --logpath /home/mongo/db2/dbrs2.log --pidfilepath /home/mongo/db2/dbrs2.pid;'; done
for i in {1..3}; do gcloud compute ssh mongo$i --command='mongod --auth --keyFile /home/mongo/mongo-security/keyfile --shardsvr --dbpath /home/mongo/db3 --bind_ip_all --port 27031 --replSet RS3 --fork --logpath /home/mongo/db3/dbrs3.log --pidfilepath /home/mongo/db3/dbrs3.pid;'; done


-- создаем два mongoS c ключем
for i in 3 4; do gcloud compute ssh mongo$i --command='sudo mkdir -p /home/mongo/dbms && sudo chmod 777 /home/mongo/dbms'; done
for i in 3 4; do gcloud compute ssh mongo$i --command='mongos --keyFile /home/mongo/mongo-security/keyfile --configdb RScfg/mongo1:27001,mongo2:27001,mongo3:27001 --bind_ip_all --port 27000 --fork --logpath /home/mongo/dbms/dbs.log --pidfilepath /home/mongo/dbms/dbs.pid'; done

!!! собрали шардированный реплицированный кластер с аутентификацией!!!

mongo --port 27000 --host mongo4 -u "UserRoot" -p Otus\$123 --authenticationDatabase "admin"
db.a.insert({"a":1})

-- а вот шарды то и забыли)
-- https://docs.mongodb.com/manual/reference/command/addShard/
-- общая рекомендация из БД admin добавлять
use admin
sh.addShard("RS1/mongo1:27011,mongo2:27011,mongo3:27011")
sh.addShard("RS2/mongo1:27021,mongo2:27021,mongo3:27021")
sh.addShard("RS3/mongo1:27031,mongo2:27031,mongo3:27031")
sh.status()


--Размер БД
for i in {1..4}; do gcloud compute ssh mongo$i --command='hostname; sudo du -m -s /home/mongo/*'; done;

-- коллекция котировок с nasdaq 750Мб, 4,3кк записей
-- на 4 хосте
gcloud compute ssh mongo4
wget https://dl.dropboxusercontent.com/s/p75zp1karqg6nnn/stocks.zip
sudo apt install unzip
unzip -qo stocks.zip 
cd dump/stocks/
ls -l
-- просто так восстановить не сможем !!!
mongorestore --port 27000 values.bson
-- Unauthorized

mongorestore --port 27000 -u "UserRoot" -p Otus\$123 --authenticationDatabase "admin" values.bson

mongo --port 27000 -u "UserRoot" -p Otus\$123 --authenticationDatabase "admin"
db.values.find().limit(1)
-- какой ключ выбрать??

db.values.count()
show databases

-- запустим долгий запрос
-- db.values.find({$where: '(this.open - this.close > 100)'},{"stock_symbol":1,"open":1,"close":1})
-- через 20 минут надоело) посмотрим загрузку - так как уехало на 2 RS - то его мастер и будет страдать
-- посмотрим план
use test
db.values.find({$where: '(this.open - this.close > 100)'}).explain("executionStats")
-- и его тоже не смогли

use test
db.values.createIndex({stock_symbol: 1})
-- меньше 1 минуты индекс
sh.enableSharding("test")
sh.shardCollection("test.values",{ stock_symbol: 1 })
sh.status()


-- Тоже самое, но через mapreduce.
-- Работает за 10 секунд
var map=function(){
   if (this.open - this.close > 100)  {
    emit(this.stock_symbol, this.open - this.close);
   }
};

var reduce=function(key, values) {
     return Array.sum(values);
};
db.values.mapReduce(map, reduce, {out: 'o' })
db.o.find()


-- 
gcloud compute ssh mongo1
mongo --port 27000 -u "UserRoot" -p Otus\$123 --authenticationDatabase "admin"




-- percona dump
pbm

-- https://docs.percona.com/percona-backup-mongodb/initial-setup.html
на каждой ноде и КС!!!
mongo --port 27001 -u "UserRoot" -p Otus\$123 --authenticationDatabase "admin"
mongo --host mongo1 --port 27011 -u "UserDBRoot" -p Otus\$123 --authenticationDatabase "admin"
mongo --host mongo2 --port 27021 -u "UserDBRoot" -p Otus\$123 --authenticationDatabase "admin"
mongo --host mongo3 --port 27031 -u "UserDBRoot" -p Otus\$123 --authenticationDatabase "admin"
use admin
db.getSiblingDB("admin").createRole({ "role": "pbmAnyAction",
      "privileges": [
         { "resource": { "anyResource": true },
           "actions": [ "anyAction" ]
         }
      ],
      "roles": []
   });

db.getSiblingDB("admin").createUser({user: "pbmuser",
       "pwd": "secretpwd",
       "roles" : [
          { "db" : "admin", "role" : "readWrite", "collection": "" },
          { "db" : "admin", "role" : "backup" },
          { "db" : "admin", "role" : "clusterMonitor" },
          { "db" : "admin", "role" : "restore" },
          { "db" : "admin", "role" : "pbmAnyAction" }
       ]
    });


-- файл, ответственный за подключение к БД для бэкапа
sudo nano /etc/default/pbm-agent

-- создадим каталоги для бэкапов
for i in {1..3}; do gcloud compute ssh mongo$i --command='sudo mkdir -p /home/mongo/backups && sudo chmod 777 /home/mongo/backups && sudo mkdir -p /home/mongo/pbm && sudo chmod 777 /home/mongo/pbm'; done

-- файл с конфигурацией куда писать бэкапы
cat <<EOF > pbm_config.yaml
storage:
  type: filesystem
  filesystem:
    path: /home/mongo/backups
EOF


scp /mnt/c/download/pbm_config.yaml aeugene@35.225.245.110:~/
scp /mnt/c/download/pbm_config.yaml aeugene@34.133.79.110:~/
scp /mnt/c/download/pbm_config.yaml aeugene@34.133.30.159:~/

-- применим конфиги (PITR enabled)
for i in {1..3}; do gcloud compute ssh mongo$i --command='pbm config --set pitr.enabled=true --file /home/aeugene/pbm_config.yaml --mongodb-uri "mongodb://pbmuser:secretpwd@localhost:27001/?authSource=admin&replicaSet=RScfg"'; done

-- sudo systemctl start pbm-agent
-- sudo systemctl start pbm-agent
-- sudo systemctl status pbm-agent
-- sudo systemctl stop pbm-agent
-- journalctl -u pbm-agent.service

-- https://docs.percona.com/percona-backup-mongodb/running.html
export PBM_MONGODB_URI="mongodb://pbmuser:secretpwd@localhost:27001/?authSource=admin&replicaSet=RScfg"
pbm list
-- stop the balancer
-- pbm backup --compression=gzip

-- db.getSiblingDB("admin").pbmConfig.findOne()
-- запускаем агент бэкап для КС
for i in {1..3}; do gcloud compute ssh mongo$i --command='nohup pbm-agent --mongodb-uri "mongodb://pbmuser:secretpwd@localhost:27001/?authSource=admin&replicaSet=RScfg" > /home/mongo/pbm/agent.$(hostname -s).27001.log 2>&1 &'; done;
-- запускаем агент бэкап для остальных реплик
for i in {1..3}; do gcloud compute ssh mongo$i --command='nohup pbm-agent --mongodb-uri "mongodb://pbmuser:secretpwd@localhost:27011/?authSource=admin&replicaSet=RS1" > /home/mongo/pbm/agent.$(hostname -s).27011.log 2>&1 &'; done;
for i in {1..3}; do gcloud compute ssh mongo$i --command='nohup pbm-agent --mongodb-uri "mongodb://pbmuser:secretpwd@localhost:27021/?authSource=admin&replicaSet=RS2" > /home/mongo/pbm/agent.$(hostname -s).27021.log 2>&1 &'; done;
for i in {1..3}; do gcloud compute ssh mongo$i --command='nohup pbm-agent --mongodb-uri "mongodb://pbmuser:secretpwd@localhost:27031/?authSource=admin&replicaSet=RS3" > /home/mongo/pbm/agent.$(hostname -s).27031.log 2>&1 &'; done;

ps -xf

pbm status
pbm logs

-- можем зайти посмотреть что у нас есть
-- mongo --port 27011 -u "UserDBRoot" -p Otus\$123 --authenticationDatabase "admin"
-- mongo --host mongo2 --port 27021 -u "UserDBRoot" -p Otus\$123 --authenticationDatabase "admin"
-- mongo --host mongo3 --port 27031 -u "UserDBRoot" -p Otus\$123 --authenticationDatabase "admin"



-- вариант добавления в автозагрузку
-- https://artkiev.com/blog/ubuntu-add-autorun.htm
-- https://www.digitalocean.com/community/tutorials/how-to-configure-a-linux-service-to-start-automatically-after-a-crash-or-reboot-part-1-practical-examples
-- sudo systemctl enable mongod
pbm backup --compression=gzip
pbm list
pbm status
pbm logs

-- восстанавливаемся из бэкапа
-- https://docs.percona.com/percona-backup-mongodb/running.html#restoring-a-backup
-- If you enabled Point-in-Time Recovery, disable it before running pbm restore. 
-- This is because Point-in-Time Recovery incremental backups and restore are incompatible operations and cannot be run together.

https://docs.percona.com/percona-backup-mongodb/running.html#pbm-restore-new-env

pbm restore --help

https://docs.mongodb.com/manual/tutorial/manage-sharded-cluster-balancer/#disable-the-balancer
mongo --host mongo4 --port 27000 -u "UserRoot" -p Otus\$123 --authenticationDatabase "admin"
sh.stopBalancer()
show databases
use test
db.dropDatabase()

-- disable mongos
-- for i in {3..4}; do gcloud compute ssh mongo$i --command="hostname; ps -aef | grep mongos | grep -v grep | awk {'print \$2'}| sudo xargs kill -9"; done
-- on 1
pbm list
pbm restore 2022-01-11T18:06:37Z

-- !!!все бэкапы должны быть в этом каталоге!!!
-- on notebook
mkdir mongo
gcloud compute instances list
scp -r aeugene@35.225.245.110:/home/mongo/backups /mnt/c/download/mongo
scp -r aeugene@34.133.79.110:/home/mongo/backups /mnt/c/download/mongo
scp -r aeugene@34.133.30.159:/home/mongo/backups /mnt/c/download/mongo

scp -r /mnt/c/download/mongo aeugene@35.225.245.110:/home
scp -r /mnt/c/download/mongo aeugene@34.133.79.110:/home
scp -r /mnt/c/download/mongo aeugene@34.133.30.159:/home

-- чтобы не мучаться
-- https://www.digitalocean.com/community/tutorials/how-to-set-up-an-nfs-mount-on-ubuntu-20-04-ru

pbm restore 2022-01-11T18:06:37Z

-- sudo chown -R pbm:pbm /home/mongo/backups
-- sudo chmod -R 777 /home/mongo/backups

pbm status
pbm logs

New in version 1.3.2: The Percona Backup for MongoDB config includes the restore options 
to adjust the memory consumption by the pbm-agent in environments with tight memory bounds. 
This allows preventing out of memory errors during the restore operation.

restore:
  batchSize: 500
  numInsertionWorkers: 10

db.values.count()


-- PITR
https://docs.percona.com/percona-backup-mongodb/point-in-time-recovery.html
за полное и красивое решение с меня книжка по Постгрес 13 в подарок)



-- ЕСЛИ) что-то пошло не так
-- убиваем все, если с правами косякнули
for i in {1..4}; do gcloud compute ssh mongo$i --command="hostname; ps -aef | grep mongo | grep -v grep | awk {'print \$2'}| sudo xargs kill -9"; done

-- Стартуем монго и бэкап агенты
-- запускаем Конфиг с аутентификацией И КЛЮЧОМ
for i in {1..3}; do gcloud compute ssh mongo$i --command='hostname; mongod --auth --keyFile /home/mongo/mongo-security/keyfile --configsvr --bind_ip localhost,$(hostname) --dbpath /home/mongo/dbc1 --port 27001 --replSet RScfg --fork --logpath /home/mongo/dbc1/dbc1.log --pidfilepath /home/mongo/dbc1/dbc1.pid' & done;

-- запускаем репклики -- С авторизацией И ключом
for i in {1..3}; do gcloud compute ssh mongo$i --command='mongod --auth --keyFile /home/mongo/mongo-security/keyfile --shardsvr --dbpath /home/mongo/db1 --bind_ip localhost,$(hostname) --port 27011 --replSet RS1 --fork --logpath /home/mongo/db1/dbrs1.log --pidfilepath /home/mongo/db1/dbrs1.pid;'; done
for i in {1..3}; do gcloud compute ssh mongo$i --command='mongod --auth --keyFile /home/mongo/mongo-security/keyfile --shardsvr --dbpath /home/mongo/db2 --bind_ip localhost,$(hostname) --port 27021 --replSet RS2 --fork --logpath /home/mongo/db2/dbrs2.log --pidfilepath /home/mongo/db2/dbrs2.pid;'; done
for i in {1..3}; do gcloud compute ssh mongo$i --command='mongod --auth --keyFile /home/mongo/mongo-security/keyfile --shardsvr --dbpath /home/mongo/db3 --bind_ip localhost,$(hostname) --port 27031 --replSet RS3 --fork --logpath /home/mongo/db3/dbrs3.log --pidfilepath /home/mongo/db3/dbrs3.pid;'; done

-- mongos
for i in 3 4; do gcloud compute ssh mongo$i --command='mongos --keyFile /home/mongo/mongo-security/keyfile --configdb RScfg/mongo1:27001,mongo2:27001,mongo3:27001 --bind_ip_all --port 27000 --fork --logpath /home/mongo/dbms/dbs.log --pidfilepath /home/mongo/dbms/dbs.pid'; done





